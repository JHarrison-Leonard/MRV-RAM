#!/usr/bin/python3

# Module specific code for RAM
# by Justin Leonard with team "They Might be Heisenberg"

import time
import threading
import queue
import subprocess
import sys
import os

# Have to go through a lot of work to hush pygames plug
# It's support message annoyingly infects stdout, which is piped to the module
devnull = open(os.devnull, 'w')
oldout = sys.stdout
sys.stdout = devnull
import pygame
sys.stdout =oldout



## Controller code stolen straight from PS3RCv2.py
# Controller MAC
controller_MAC = "00:19:C1:15:D9:F8" # MRV PS3 controller
#controller_MAC = "70:20:84:5E:F7:5E" # TMBH PS4 controller

# Conroller axis and button definitions
controller_shoulder_down = 6 # D-pad down
controller_shoulder_up = 4 # D-pad up
controller_elbow_down = 7 # D-pad left
controller_elbow_up = 5 # D-pad right
controller_wrist_down = 14 # Cross
controller_wrist_up = 12 # Triangle
controller_claw_close = 15 # Square
controller_claw_open = 13 # Circle
desired_pygame_analog = [4, 5, 6, 7, 12, 14] # All analog motors

# Controller check interval/rate
controller_check_interval = 10 #seconds
controller_init_retry_interval = 0.2 #seconds
controller_init_retry_max = controller_check_interval / controller_init_retry_interval

# pygame event whitelist
desired_pygame_events = [pygame.JOYBUTTONDOWN, pygame.JOYBUTTONUP]

# Change manager definitions
change_update_rate = 0.05 #seconds

# Comm manager definitions
comm_update_rate = 0.025 #seconds  Must be greater than change_update_rate
shoulder_char = 'S'
elbow_char = 'E'
wrist_char = 'W'
claw_char = 'C'

# Servo pulsewidth definitions
# Shoulder [SA-1230SG]
shoulder_min = 800 #us
shoulder_max = 2200 #us
shoulder_center = 1500 #us
shoulder_rate = 1000 #us per second
# Elbow [2000-0025-0002]
elbow_min = 500 #us
elbow_max = 2500 #us
elbow_center = 1500 #us
elbow_rate = 1000 #us per second
# Wrist [D89MW]
wrist_min = 850 #us
wrist_max = 2350 #us
wrist_center = 1600 #us
wrist_rate = 1000 #us per second
# Claw [HS-311]
claw_min = 575 #us
claw_max = 2460 #us
claw_center = 1518 #us
claw_close = claw_center - 500
claw_open = claw_center + 500



# Initializes controller, if there is one
def init_controller(attempts=0):
	if attempts >= controller_init_retry_max:
		return
	
	pygame.joystick.quit()
	pygame.joystick.init()
	joystick_count=pygame.joystick.get_count()
	if not joystick_count:
		time.sleep(controller_init_retry_interval)
		init_controller(attempts+1)
	else:
		for i in range(joystick_count):
			joystick = pygame.joystick.Joystick(i)
			joystick.init()


# To be ran in it's own thread. Keeps the controller initialized
def controller_manager():
	while True:
		if not controller_MAC in subprocess.getoutput("hcitool con") or pygame.joystick.get_count() == 0:
			init_controller()
		else:
			time.sleep(controller_check_interval)



# read and trade functions stolen straight from MDM demo code
def read():
	out = ""
	while out == "":
		out = sys.stdin.readline()
	return out.rstrip()

def trade(message):
	print(message)
	return read()



## RAM specific functions
# Function designed to run on the same thread that pygame was intiialized in. Waits for an event
# list in desired pygame_event. Forwards digital inputs to change_manager. Calculates pulse width
# commands and forwards to comm_manager for analog inputs.
def event_manager():
	comm_events = queue.Queue()
	thread_comm_manager = threading.Thread(target=comm_manager, args=(comm_events,), daemon=True)
	thread_comm_manager.start()
	
	change_events = queue.Queue()
	thread_change_manager = threading.Thread(target=change_manager, args=(change_events, comm_events), daemon=True)
	thread_change_manager.start()
	
	while True:
		event = pygame.event.wait()
		if event.type is pygame.JOYBUTTONDOWN or event.type is pygame.JOYBUTTONUP:
			print(event.button)
			if event.button in desired_pygame_analog:
				change_events.put(event)

# Function designed to run in its own thread. Taking pygame button events sent over event_queue,
# keeps track of and manages the pulsewidth commands to be sent to the module via comm_manager.
# For the shoulder turn servo, turns left if controller_shoulder_turn_left is held and turns
# right if controller_shoulder_turn_right is held.
# Dev note: I legitimately hate this code just. It's ugly, it's got the sterotypical elif train, and it's ugly.
# Seriously, if anyone knows how to make this not suck in python, hit me up. This will be the only thing in
# this repository I will be willing to change after I graduate.
def change_manager(event_queue, comm_queue):
	current_shoulder = shoulder_center
	shoulder = 0
	current_elbow = elbow_center
	elbow = 0
	current_wrist = wrist_center
	wrist = 0
	current_claw = claw_center
	claw = claw_center
	
	while True:
		if not shoulder and not elbow and not wrist:
			event = event_queue.get()
			
			if event.type is pygame.JOYBUTTONDOWN:
				if event.button == controller_shoulder_down:
					shoulder = 1
				elif event.button == controller_shoulder_up:
					shoulder = -1
				elif event.button == controller_elbow_down:
					elbow = 1
				elif event.button == controller_elbow_up:
					elbow = -1
				elif event.button == controller_wrist_down:
					wrist = 1
				elif event.button == controller_wrist_up:
					wrist = -1
				elif event.button == controller_claw_close:
					claw = claw_close
				elif event.button == controller_claw_open:
					claw = claw_open
				
			elif event.type is pygame.JOYBUTTONUP:
				if event.button == controller_shoulder_down or event.button == controller_shoulder_up:
					shoulder = 0
				elif event.button == controller_elbow_down or event.button == controller_elbow_up:
					elbow = 0
				elif event.button == controller_wrist_down or event.button == controller_wrist_up:
					wrist = 0
				elif event.button == controller_claw_close or event.button == controller_claw_open:
					claw = claw_center
			
			event_queue.task_done()
			
		else:
			time.sleep(change_update_rate)
			try:
				event = event_queue.get_nowait()
				
				if event.type is pygame.JOYBUTTONDOWN:
					if event.button == controller_shoulder_down:
						shoulder = 1
					elif event.button == controller_shoulder_up:
						shoulder = -1
					elif event.button == controller_elbow_down:
						elbow = 1
					elif event.button == controller_elbow_up:
						elbow = -1
					elif event.button == controller_wrist_down:
						wrist = 1
					elif event.button == controller_wrist_up:
						wrist = -1
					elif event.button == controller_claw_close:
						claw = claw_close
					elif event.button == controller_claw_open:
						claw = claw_open
					
				elif event.type is pygame.JOYBUTTONUP:
					if event.button == controller_shoulder_down or event.button == controller_shoulder_up:
						shoulder = 0
					elif event.button == controller_elbow_down or event.button == controller_elbow_up:
						elbow = 0
					elif event.button == controller_wrist_down or event.button == controller_wrist_up:
						wrist = 0
					elif event.button == controller_claw_close or event.button == controller_claw_open:
						calw = claw_center
				
				event_queue.task_done()
			except queue.Empty as e:
				pass
		
		# Building command string
		command = ""
		if shoulder != 0:
			next_shoulder = max(min(current_shoulder + shoulder * shoulder_rate * change_update_rate, shoulder_max), shoulder_min)
			if next_shoulder != current_shoulder:
				current_shoulder = next_shoulder
				command += shoulder_char + str(int(current_shoulder)) + '\n'
		if elbow != 0:
			next_elbow = max(min(current_elbow + elbow * elbow_rate * change_update_rate, elbow_max), elbow_min)
			if next_elbow != current_elbow:
				current_elbow = next_elbow
				command += elbow_char + str(int(current_elbow)) + '\n'
		if wrist != 0:
			next_wrist = max(min(current_wrist + wrist * wrist_rate * change_update_rate, wrist_max), wrist_min)
			if next_wrist != current_wrist:
				current_wrist = next_wrist
				command += wrist_char + str(int(current_wrist)) + '\n'
		if claw != current_claw:
			current_claw == claw
			command += claw_char + str(int(current_claw)) + '\n'
		
		# Send command string
		if command:
			comm_queue.put(command)

# Function designed to run in its own thread. Sends strings sent through comm_queue over the stdout
# at a limited rate to keep from locking up the serial interface.
def comm_manager(comm_queue):
	while True:
		print(comm_queue.get(), end='')
		time.sleep(comm_update_rate)



# Handle arguments
for i, arg in enumerate(sys.argv[1:]):
	if arg == "type":
		print("piped serial")
		quit()
	else:
		print("Unexpected argument:", arg, file=sys.stderr())
		quit()


# Wait until piped serial is functional
while trade("Module?") != "RAM":
	pass



# RAM logic
# Initialize pygame
pygame.init()
# Set list of events allowed in event queue to desiried_events
pygame.event.set_blocked(None) # Blocks all events
pygame.event.set_allowed(desired_pygame_events)

# Initialize controller
init_controller()
# Controller manager
thread_controller_manager = threading.Thread(target=controller_manager, daemon=True)
thread_controller_manager.start()

# Main RAM logic
event_manager()
